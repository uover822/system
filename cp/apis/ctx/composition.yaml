apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: msr-ctxapp
  labels:
    type: ctxapp
spec:
  compositeTypeRef:
    apiVersion: msr.com/v1alpha1
    kind: CtxApp
  patchSets:
  - name: metadata
    patches:
    - fromFieldPath: metadata.labels
  resources:
  - name: kubernetes
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: ProviderConfig
      spec:
        credentials:
          source: InjectedIdentity
#          source: Secret
#          secretRef:
#            namespace: default
#            name: regcred
#            key: auths
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
    readinessChecks:
      - type: None
  - name: deployment
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: 
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app: 
              template:
                metadata:
                  labels:
                    app: 
                spec:
                  containers:
                    - name:
#                      image: uover822/msr-web:1
                      ports:
                        - containerPort:
#                      livenessProbe:
#                        enabled: true
#                      readinessProbe:
#                        enabled: true
#                      livenessProbe:
#                        httpGet:
#                          path: /healthy
#                          port:
#                      readinessProbe:
#                        httpGet:
#                          path: /healthy
#                          port:
#                      resources:
#                        limits:
#                          cpu: 250m
#                          memory: 256Mi
#                        requests:
#                          cpu: 125m
#                          memory: 128Mi
                      env:
                        - name: cluster
                          valueFrom:
                            configMapKeyRef:
                              name: msrconfigmap
                              key: cluster
                        - name: app
                          valueFrom:
                            configMapKeyRef:
                              name: msrconfigmap
                              key: app
                        - name: user
                          valueFrom:
                            configMapKeyRef:
                              name: msrconfigmap
                              key: user
#                      volumeMounts:
#                          - mountPath: /opt/data
#                            name: msr-volume
#                  volumes:
#                    - name: msr-volume
#                      persistentVolumeClaim:
#                        claimName: msr-claim
                  imagePullPolicy: IfNotPresent
                  imagePullSecrets:
                  - name: regcred
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-deployment"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.metadata.name
    - fromFieldPath: spec.parameters.namespace
      toFieldPath: spec.forProvider.manifest.metadata.namespace
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.metadata.labels.app
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.spec.selector.matchLabels.app
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.spec.template.metadata.labels.app
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].name
    - fromFieldPath: spec.parameters.image
      toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].image
    - fromFieldPath: spec.parameters.port
      toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].ports[0].containerPort
#    - fromFieldPath: spec.parameters.port
#      toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].livenessProbe.httpGet.port
#    - fromFieldPath: spec.parameters.port
#      toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].readinessProbe.httpGet.port
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
    readinessChecks:
      - type: None
  - name: service
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: Service
            metadata:
              name:
            spec:
              selector:
                app:
              ports:
                - port:
                  targetPort:
              type: LoadBalancer
              sessionAffinity: ClientIP
        providerConfigRef:
          name: kubernetes-provider
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-service"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.metadata.name
    - fromFieldPath: spec.parameters.namespace
      toFieldPath: spec.forProvider.manifest.metadata.namespace
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.metadata.labels.app
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.spec.selector.app
    - fromFieldPath: spec.parameters.port
      toFieldPath: spec.forProvider.manifest.spec.ports[0].port
    - fromFieldPath: spec.parameters.port
      toFieldPath: spec.forProvider.manifest.spec.ports[0].targetPort
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
    readinessChecks:
      - type: None
  - name: ingress
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: networking.k8s.io/v1
            kind: Ingress
            metadata:
              annotations:
                nginx.ingress.kubernetes.io/rewrite-target: /$1
                ingress.kubernetes.io/ssl-redirect: "false"
                nginx.org/proxy-connect-timeout: 3600s
                nginx.org/proxy-read-timeout: 3600s
                nginx.org/proxy-send-timeout: 3600s
            spec:
              ingressClassName: nginx
              rules:
              - host: context
              - http:
                  paths:
                    - path: /push
                      pathType: Prefix
                      backend:
                        service:
                          name: context
                          port:
                            number: 4567
                    - path: /iot
                      pathType: Prefix
                      backend:
                        service:
                          name: context
                          port:
                            number: 4567
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-ingress"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.metadata.name
    - fromFieldPath: spec.parameters.namespace
      toFieldPath: spec.forProvider.manifest.metadata.namespace
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.metadata.labels.app
    - fromFieldPath: spec.parameters.host
      toFieldPath: spec.forProvider.manifest.spec.rules[0].host
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.spec.rules[0].http.paths[0].backend.service.name
    - fromFieldPath: spec.parameters.port
      toFieldPath: spec.forProvider.manifest.spec.rules[0].http.paths[0].backend.service.port.number
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.spec.rules[0].http.paths[1].backend.service.name
    - fromFieldPath: spec.parameters.port
      toFieldPath: spec.forProvider.manifest.spec.rules[0].http.paths[1].backend.service.port.number
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: spec.forProvider.manifest.spec.rules[0].host
      toFieldPath: status.host
    readinessChecks:
      - type: None
  - name: hpa
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: autoscaling/v1
            kind: HorizontalPodAutoscaler
            spec:
              minReplicas: 1
              maxReplicas: 1
              scaleTargetRef:
                apiVersion: apps/v1
                kind: Deployment
              targetCPUUtilizationPercentage: 8000
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-ingress"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.metadata.name
    - fromFieldPath: spec.parameters.namespace
      toFieldPath: spec.forProvider.manifest.metadata.namespace
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.metadata.labels.sbc
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.spec.scaleTargetRef.name
    readinessChecks:
      - type: None
